/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  ArticleListResponse,
  ArticleRequest,
  ArticleResponse,
  Error,
  GetArticlesParams
} from '.././models'


  
  export const getArticles = (
    params?: GetArticlesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArticleListResponse>> => {
    return axios.default.get(
      `http://localhost:1337/api/articles`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetArticlesKey = (params?: GetArticlesParams,) => [`http://localhost:1337/api/articles`, ...(params ? [params]: [])] as const;

export type GetArticlesQueryResult = NonNullable<Awaited<ReturnType<typeof getArticles>>>
export type GetArticlesQueryError = AxiosError<Error>

export const useGetArticles = <TError = AxiosError<Error>>(
  params?: GetArticlesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getArticles>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetArticlesKey(params) : null);
  const swrFn = () => getArticles(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const postArticles = (
    articleRequest: ArticleRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArticleResponse>> => {
    return axios.default.post(
      `http://localhost:1337/api/articles`,
      articleRequest,options
    );
  }



export const getPostArticlesMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: ArticleRequest }): Promise<AxiosResponse<ArticleResponse>> => {
    return postArticles(arg, options);
  }
}
export const getPostArticlesMutationKey = () => [`http://localhost:1337/api/articles`] as const;

export type PostArticlesMutationResult = NonNullable<Awaited<ReturnType<typeof postArticles>>>
export type PostArticlesMutationError = AxiosError<Error>

export const usePostArticles = <TError = AxiosError<Error>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postArticles>>, TError, Key, ArticleRequest, Awaited<ReturnType<typeof postArticles>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostArticlesMutationKey();
  const swrFn = getPostArticlesMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const getArticlesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArticleResponse>> => {
    return axios.default.get(
      `http://localhost:1337/api/articles/${id}`,options
    );
  }



export const getGetArticlesIdKey = (id: number,) => [`http://localhost:1337/api/articles/${id}`] as const;

export type GetArticlesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getArticlesId>>>
export type GetArticlesIdQueryError = AxiosError<Error>

export const useGetArticlesId = <TError = AxiosError<Error>>(
  id: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getArticlesId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetArticlesIdKey(id) : null);
  const swrFn = () => getArticlesId(id, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const putArticlesId = (
    id: number,
    articleRequest: ArticleRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ArticleResponse>> => {
    return axios.default.put(
      `http://localhost:1337/api/articles/${id}`,
      articleRequest,options
    );
  }



export const getPutArticlesIdMutationFetcher = (id: number, options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: ArticleRequest }): Promise<AxiosResponse<ArticleResponse>> => {
    return putArticlesId(id, arg, options);
  }
}
export const getPutArticlesIdMutationKey = (id: number,) => [`http://localhost:1337/api/articles/${id}`] as const;

export type PutArticlesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putArticlesId>>>
export type PutArticlesIdMutationError = AxiosError<Error>

export const usePutArticlesId = <TError = AxiosError<Error>>(
  id: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putArticlesId>>, TError, Key, ArticleRequest, Awaited<ReturnType<typeof putArticlesId>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutArticlesIdMutationKey(id);
  const swrFn = getPutArticlesIdMutationFetcher(id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const deleteArticlesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.default.delete(
      `http://localhost:1337/api/articles/${id}`,options
    );
  }



export const getDeleteArticlesIdMutationFetcher = (id: number, options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<number>> => {
    return deleteArticlesId(id, options);
  }
}
export const getDeleteArticlesIdMutationKey = (id: number,) => [`http://localhost:1337/api/articles/${id}`] as const;

export type DeleteArticlesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteArticlesId>>>
export type DeleteArticlesIdMutationError = AxiosError<Error>

export const useDeleteArticlesId = <TError = AxiosError<Error>>(
  id: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteArticlesId>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteArticlesId>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteArticlesIdMutationKey(id);
  const swrFn = getDeleteArticlesIdMutationFetcher(id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
