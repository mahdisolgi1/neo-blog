/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  AboutRequest,
  AboutResponse,
  Error,
  GetAboutParams
} from '.././models'


  
  export const getAbout = (
    params?: GetAboutParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AboutResponse>> => {
    return axios.default.get(
      `http://localhost:1337/api/about`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetAboutKey = (params?: GetAboutParams,) => [`http://localhost:1337/api/about`, ...(params ? [params]: [])] as const;

export type GetAboutQueryResult = NonNullable<Awaited<ReturnType<typeof getAbout>>>
export type GetAboutQueryError = AxiosError<Error>

export const useGetAbout = <TError = AxiosError<Error>>(
  params?: GetAboutParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAbout>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAboutKey(params) : null);
  const swrFn = () => getAbout(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const putAbout = (
    aboutRequest: AboutRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AboutResponse>> => {
    return axios.default.put(
      `http://localhost:1337/api/about`,
      aboutRequest,options
    );
  }



export const getPutAboutMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: AboutRequest }): Promise<AxiosResponse<AboutResponse>> => {
    return putAbout(arg, options);
  }
}
export const getPutAboutMutationKey = () => [`http://localhost:1337/api/about`] as const;

export type PutAboutMutationResult = NonNullable<Awaited<ReturnType<typeof putAbout>>>
export type PutAboutMutationError = AxiosError<Error>

export const usePutAbout = <TError = AxiosError<Error>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putAbout>>, TError, Key, AboutRequest, Awaited<ReturnType<typeof putAbout>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutAboutMutationKey();
  const swrFn = getPutAboutMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const deleteAbout = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.default.delete(
      `http://localhost:1337/api/about`,options
    );
  }



export const getDeleteAboutMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<number>> => {
    return deleteAbout(options);
  }
}
export const getDeleteAboutMutationKey = () => [`http://localhost:1337/api/about`] as const;

export type DeleteAboutMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAbout>>>
export type DeleteAboutMutationError = AxiosError<Error>

export const useDeleteAbout = <TError = AxiosError<Error>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteAbout>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteAbout>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteAboutMutationKey();
  const swrFn = getDeleteAboutMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
