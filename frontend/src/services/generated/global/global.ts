/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  Error,
  GetGlobalParams,
  GlobalRequest,
  GlobalResponse
} from '.././models'


  
  export const getGlobal = (
    params?: GetGlobalParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GlobalResponse>> => {
    return axios.default.get(
      `http://localhost:1337/api/global`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetGlobalKey = (params?: GetGlobalParams,) => [`http://localhost:1337/api/global`, ...(params ? [params]: [])] as const;

export type GetGlobalQueryResult = NonNullable<Awaited<ReturnType<typeof getGlobal>>>
export type GetGlobalQueryError = AxiosError<Error>

export const useGetGlobal = <TError = AxiosError<Error>>(
  params?: GetGlobalParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getGlobal>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetGlobalKey(params) : null);
  const swrFn = () => getGlobal(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const putGlobal = (
    globalRequest: GlobalRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GlobalResponse>> => {
    return axios.default.put(
      `http://localhost:1337/api/global`,
      globalRequest,options
    );
  }



export const getPutGlobalMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: GlobalRequest }): Promise<AxiosResponse<GlobalResponse>> => {
    return putGlobal(arg, options);
  }
}
export const getPutGlobalMutationKey = () => [`http://localhost:1337/api/global`] as const;

export type PutGlobalMutationResult = NonNullable<Awaited<ReturnType<typeof putGlobal>>>
export type PutGlobalMutationError = AxiosError<Error>

export const usePutGlobal = <TError = AxiosError<Error>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putGlobal>>, TError, Key, GlobalRequest, Awaited<ReturnType<typeof putGlobal>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutGlobalMutationKey();
  const swrFn = getPutGlobalMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const deleteGlobal = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.default.delete(
      `http://localhost:1337/api/global`,options
    );
  }



export const getDeleteGlobalMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<number>> => {
    return deleteGlobal(options);
  }
}
export const getDeleteGlobalMutationKey = () => [`http://localhost:1337/api/global`] as const;

export type DeleteGlobalMutationResult = NonNullable<Awaited<ReturnType<typeof deleteGlobal>>>
export type DeleteGlobalMutationError = AxiosError<Error>

export const useDeleteGlobal = <TError = AxiosError<Error>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteGlobal>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteGlobal>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteGlobalMutationKey();
  const swrFn = getDeleteGlobalMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
