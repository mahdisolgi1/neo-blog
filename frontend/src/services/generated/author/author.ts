/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  AuthorListResponse,
  AuthorRequest,
  AuthorResponse,
  Error,
  GetAuthorsParams
} from '.././models'


  
  export const getAuthors = (
    params?: GetAuthorsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthorListResponse>> => {
    return axios.default.get(
      `http://localhost:1337/api/authors`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetAuthorsKey = (params?: GetAuthorsParams,) => [`http://localhost:1337/api/authors`, ...(params ? [params]: [])] as const;

export type GetAuthorsQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthors>>>
export type GetAuthorsQueryError = AxiosError<Error>

export const useGetAuthors = <TError = AxiosError<Error>>(
  params?: GetAuthorsParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAuthors>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAuthorsKey(params) : null);
  const swrFn = () => getAuthors(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const postAuthors = (
    authorRequest: AuthorRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthorResponse>> => {
    return axios.default.post(
      `http://localhost:1337/api/authors`,
      authorRequest,options
    );
  }



export const getPostAuthorsMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: AuthorRequest }): Promise<AxiosResponse<AuthorResponse>> => {
    return postAuthors(arg, options);
  }
}
export const getPostAuthorsMutationKey = () => [`http://localhost:1337/api/authors`] as const;

export type PostAuthorsMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthors>>>
export type PostAuthorsMutationError = AxiosError<Error>

export const usePostAuthors = <TError = AxiosError<Error>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postAuthors>>, TError, Key, AuthorRequest, Awaited<ReturnType<typeof postAuthors>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostAuthorsMutationKey();
  const swrFn = getPostAuthorsMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const getAuthorsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthorResponse>> => {
    return axios.default.get(
      `http://localhost:1337/api/authors/${id}`,options
    );
  }



export const getGetAuthorsIdKey = (id: number,) => [`http://localhost:1337/api/authors/${id}`] as const;

export type GetAuthorsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthorsId>>>
export type GetAuthorsIdQueryError = AxiosError<Error>

export const useGetAuthorsId = <TError = AxiosError<Error>>(
  id: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAuthorsId>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAuthorsIdKey(id) : null);
  const swrFn = () => getAuthorsId(id, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const putAuthorsId = (
    id: number,
    authorRequest: AuthorRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthorResponse>> => {
    return axios.default.put(
      `http://localhost:1337/api/authors/${id}`,
      authorRequest,options
    );
  }



export const getPutAuthorsIdMutationFetcher = (id: number, options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: AuthorRequest }): Promise<AxiosResponse<AuthorResponse>> => {
    return putAuthorsId(id, arg, options);
  }
}
export const getPutAuthorsIdMutationKey = (id: number,) => [`http://localhost:1337/api/authors/${id}`] as const;

export type PutAuthorsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putAuthorsId>>>
export type PutAuthorsIdMutationError = AxiosError<Error>

export const usePutAuthorsId = <TError = AxiosError<Error>>(
  id: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof putAuthorsId>>, TError, Key, AuthorRequest, Awaited<ReturnType<typeof putAuthorsId>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPutAuthorsIdMutationKey(id);
  const swrFn = getPutAuthorsIdMutationFetcher(id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const deleteAuthorsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.default.delete(
      `http://localhost:1337/api/authors/${id}`,options
    );
  }



export const getDeleteAuthorsIdMutationFetcher = (id: number, options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<number>> => {
    return deleteAuthorsId(id, options);
  }
}
export const getDeleteAuthorsIdMutationKey = (id: number,) => [`http://localhost:1337/api/authors/${id}`] as const;

export type DeleteAuthorsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAuthorsId>>>
export type DeleteAuthorsIdMutationError = AxiosError<Error>

export const useDeleteAuthorsId = <TError = AxiosError<Error>>(
  id: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteAuthorsId>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteAuthorsId>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteAuthorsIdMutationKey(id);
  const swrFn = getDeleteAuthorsIdMutationFetcher(id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
